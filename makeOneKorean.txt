C++ 에서 int 자료형에 대한 고찰
int 자료형 변수의 양수 최대값은 (2^31-1) 으로 알려져있다.
그렇다면 음수 방향으로 최대값은 어떻게 되는가?
처음에는 양수 최대값과 동일하게 (2^31-1) 값의 음수값으로 예상했다.
실제로 해본 결과, 음수 최대값은 -2^31 값 이었다.
int 자료형 값의 범위는 2^32 였고, 0의 존재 때문에 이와 같은 결과가 나온 것이다.
변수 하나당 4byte의 용량을 갖는다고 알고 있는데
최대값, 최소값 또한 해당 용량만큼 차지하는 것인가?
이번에는 int 자료형이 가질수 있는 최대 용량을 생각해보자
처음으로 돌아가서 이 문제에 대해 고찰한 원인이 무엇인지 다시 상기할 필요가 있다.
여태껏 풀어온 문제들에 대해 실제 컴퓨터 내부 하드웨어 적인 부분에서 메모리를 어떻게 사용하는지 알 필요가 있다.


https://learn.microsoft.com/ko-kr/windows/win32/memory/memory-limits-for-windows-releases?redirectedfrom=MSDN
https://help.hcltechsw.com/dom_designer/9.0.1/appdev/H_STR_ARRTOOBIG.html


두가지 검색 결과로 미루어 보건데, int 자료형에서 최대로 가질수 있는 크기는 64Kb 였고, 이는 16K 개 만큼 원소의 개수를 가질수 있다는 뜻이다.
또한 컴퓨터 전체에서 할당가능한 최대 메모리 크기가 4GB에 불과하다는 것 또한 알게되었다.
------------------------------------------------------------------------------------------------
여태까지 동적 할당에 대해서 별 생각이 없거나, 복잡해지는 경우 대충 적당한 크기의 정적 할당을 한 후 문제를 해결해 왔었다.
하지만 지금 다시 보니 정적 할당에 명확한 한계에 대해 알게 되었고, 번거롭더라도, 사실은 따지고 보니 그렇게 복잡한 구조가 필요한 것이 아닌, 동적 할당을 좀더 생각해 보아야 했다.
그 결과, 원래 목적이었던 이 문제 또한 적절한 구조를 생각해 볼수 있게 되었다.
피라미드 형태를 생각했었고, 정적 할당의 경우에는 빈 공간이 너무 많이 남게 되었으나 동적 할당으로 다시 적절한 형태로 만들수 있었다.

어느 변수가 어떤 시점에 까지 의도한 값으로 살아 있는지 파악하는 것 또한 중요하다.
---------------------------------------------------------------------------------------------
총정리

처음에 이 문제를 맞이한 시간으로 거슬러 올라가보자
숫자를 입력 받으면 그 숫자를 1로 만드는 최단 거리에 대한 문제였다.
재귀 형식으로 풀어낼 방법을 우선 생각했었다.
그러나 그 방법은 예외사항에 대한 고려를 하기가 힘들었다.
그래서 재귀를 빠르게 포기하고 단순한 조건문으로 찾아가기를 만들었다.
다음으로 조건문을 적절한 구조로 바꾸려고 시도했는데, 아직은 전체 데이터를 보는 것이 부족한 것으로 보인다.
단순히 생각해보면 조건은 4가지였다. 그 4가지에 대해 적절한 구조를 만들수 있었다.
일종의 데이터 테이블을 만드는 것으로 귀결되었는데, 4가지 각각 조건에 대해 참, 거짓을 판단하는 것이니 16개의 원소를 가진 테이블을 만들수 있었다.
하지만 해당 테이블을 활용하는 방법을 더 고민해보아야 한다.
일단 문제 풀이에 사용한 테이블은 각 조건의 테이블이 일정 주기로 반복되는 부분이 있어, 그 기점으로 테이블을 완성하였다.
예외사항에 대한 고려는 나중으로 미루고, 결과값이 나오는 것 자체에 우선하였다.
이 다음 단계부터 예외사항 고려를 하면서 또다른 요소들을 생각해 보아야 했는데
그것은 바로 자료형과 컴퓨터 메모리 할당에 대한 고찰이었다.
예외사항을 고려하려면 이진트리의 모습으로 문제를 해결하는 것이 좋을 것이라 생각했다.
그 방법은 극단적인 경우
문제에서 주어진 최대 값이 30000이었으므로, 잘못했다간 2^30000 값을 초월하는 값만큼 컴퓨터를 혹사시켜야 하는 경우가 있을수도 있었다.
말이 안되는 값이니 일단 정적 할당을 이용하려고 했다.
그러나 정적 할당의 한계가 있고 더군다나 사용하지 않는 불필요한 공간이 있어 구조에 낭비가 많았다.
그 과정에서 자료형의 한계는 64K 인 것을 직접 확인하였고, 변수값의 한계 또한 지식으로 멈추는 것이 아닌 직접 알게 되었다.
결론적으로 번거롭더라도 생각을 조금 더 해서 동적할당을 이용하는것이 낫겠다고 판단하였고, 실제로도 그랬다.
마지막으로 얻은것은 내가 만든 변수들이 어느시점까지 내가 의도한 값으로 살아있는가를 파악해야 한다는 것 또한 알게 되었다.

앞으로 주어진 문제에 조건에 맞는 데이터 테이블을 만들어 보는것을 자주 해보아야 겠다.
-----------------------------------------11.20.-----------------------------------------
python으로 1로만들기 문제를 다시 만들어 보았다.
일단 만들면서 c++ 와 차이점을 느낀것은
list는 기본적으로 동적 자료형이었다.
그리고 hard copy 와 shallow copy 가 철저히 구분되어 있다? 를 느꼈다.
append 기능은 c++ push_back 과 유사한 기능이었고 insert, clear 등 원하는 기능이 모두 갖추어져 있었다.
다만 list 에 다른 list를 원소로 넣는 경우 신기한 일이 있었는데
그렇게 한 경우 둘은 독립적은 개체가 되지 않는다는 것 이었다.
hard copy 와 shallow copy 간에 이론적인 개념을 알면 더 좋을것 같다.